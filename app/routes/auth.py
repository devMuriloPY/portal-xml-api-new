from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy.orm import Session
from pydantic import BaseModel, EmailStr
from datetime import datetime, timedelta
from jose import JWTError, jwt
import os

from app.db.database import SessionLocal
from app.models.contador import Contador
from app.models.cliente import Cliente
from app.utils.security import gerar_hash_senha, verificar_senha
from app.utils.email_utils import enviar_email 
# 游댏 Carregar SECRET_KEY do ambiente

SECRET_KEY = os.getenv("SECRET_KEY")
if not SECRET_KEY:
    raise ValueError("游뚿 ERRO: SECRET_KEY n칚o encontrada nas vari치veis de ambiente.")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60
RESET_TOKEN_EXPIRE_MINUTES = 30

router = APIRouter()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/login")

# 游늷 Fun칞칚o para obter a sess칚o do banco
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# 游늷 Modelos de Entrada
class PrimeiroAcesso(BaseModel):
    cnpj: str
    senha: str
    senha_confirmacao: str

class LoginSchema(BaseModel):
    cnpj: str
    senha: str

# 游늷 Endpoint para Primeiro Acesso (Cria칞칚o de Senha)
@router.post("/primeiro-acesso")
def primeiro_acesso(dados: PrimeiroAcesso, db: Session = Depends(get_db)):
    # 游댌 Buscar o CNPJ exatamente como est치 no banco (com m치scara)
    contador = db.query(Contador).filter(Contador.cnpj == dados.cnpj).first()

    if not contador:
        raise HTTPException(status_code=404, detail="CNPJ n칚o encontrado")

    if contador.senha_hash:
        raise HTTPException(status_code=400, detail="Usu치rio j치 possui senha cadastrada")

    if dados.senha != dados.senha_confirmacao:
        raise HTTPException(status_code=400, detail="As senhas n칚o coincidem")

    contador.senha_hash = gerar_hash_senha(dados.senha)
    db.commit()

    return {"status": "Senha cadastrada com sucesso!"}

# 游늷 Endpoint para Login
@router.post("/login")
def login(dados: LoginSchema, db: Session = Depends(get_db)):
    # 游댌 Buscar o CNPJ no banco exatamente como est치 (com m치scara)
    contador = db.query(Contador).filter(Contador.cnpj == dados.cnpj).first()

    if not contador or not contador.senha_hash:
        raise HTTPException(status_code=404, detail="Usu치rio n칚o encontrado ou sem senha cadastrada")

    if not verificar_senha(dados.senha, contador.senha_hash):
        raise HTTPException(status_code=401, detail="Senha incorreta")

    # 游댏 Gerar Token JWT
    token = jwt.encode(
        {"sub": contador.cnpj, "exp": datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)},
        SECRET_KEY,
        algorithm=ALGORITHM
    )

    return {"access_token": token, "token_type": "bearer"}

# 游늷 Fun칞칚o para Validar Token JWT
def obter_contador_logado(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        cnpj = payload.get("sub")

        if cnpj is None:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Token inv치lido")

        contador = db.query(Contador).filter(Contador.cnpj == cnpj).first()
        if contador is None:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Usu치rio n칚o encontrado")

        return contador

    except JWTError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Token inv치lido ou expirado")

# 游늷 Endpoint para Retornar os Clientes do Contador Autenticado
@router.get("/clientes")
def listar_clientes(contador: Contador = Depends(obter_contador_logado), db: Session = Depends(get_db)):
    clientes = db.query(Cliente).filter(Cliente.id_contador == contador.id_contador).all()

    if not clientes:
        return {"mensagem": "Nenhum cliente encontrado"}

    return [
        {
            "id_cliente": cliente.id_cliente,
            "nome": cliente.nome,
            "cnpj": cliente.cnpj,  # 游댌 Mantendo a m치scara no retorno
            "email": cliente.email,
            "telefone": cliente.telefone
        }
        for cliente in clientes
    ]

class SolicitarRedefinicao(BaseModel):
    email: EmailStr

# Endpoint para solicitar redefini칞칚o de senha
@router.post("/solicitar-redefinicao")
def solicitar_redefinicao(dados: SolicitarRedefinicao, db: Session = Depends(get_db)):
    contador = db.query(Contador).filter(Contador.email == dados.email).first()

    if not contador:
        raise HTTPException(status_code=404, detail="E-mail n칚o encontrado")

    # Gerar um token de redefini칞칚o de senha (v치lido por 30 minutos)
    expiracao = datetime.utcnow() + timedelta(minutes=RESET_TOKEN_EXPIRE_MINUTES)
    token_redefinicao = jwt.encode({"sub": contador.email, "exp": expiracao}, SECRET_KEY, algorithm=ALGORITHM)

    # Criar link de redefini칞칚o de senha
    url_base = os.getenv("FRONTEND_URL", "http://localhost:3000")
    link_redefinicao = f"{url_base}/redefinir-senha?token={token_redefinicao}"

    # Enviar o e-mail com o link de redefini칞칚o
    enviar_email(
        destinatario=contador.email,
        assunto="Redefini칞칚o de Senha",
        corpo=f"""
        <p>Ol치, {contador.nome},</p>
        <p>Recebemos uma solicita칞칚o para redefinir sua senha. Clique no link abaixo para definir uma nova senha:</p>
        <p><a href="{link_redefinicao}">Redefinir Senha</a></p>
        <p>Se voc칡 n칚o solicitou essa altera칞칚o, ignore este e-mail.</p>
        """
    )

    return {"mensagem": "E-mail de redefini칞칚o enviado com sucesso"}


# Modelo de entrada para redefinir senha
class RedefinirSenha(BaseModel):
    token: str
    nova_senha: str
    confirmar_senha: str

# Endpoint para redefinir a senha
@router.post("/redefinir-senha")
def redefinir_senha(dados: RedefinirSenha, db: Session = Depends(get_db)):
    try:
        payload = jwt.decode(dados.token, SECRET_KEY, algorithms=[ALGORITHM])
        email = payload.get("sub")
    except:
        raise HTTPException(status_code=400, detail="Token inv치lido ou expirado")

    contador = db.query(Contador).filter(Contador.email == email).first()

    if not contador:
        raise HTTPException(status_code=404, detail="Usu치rio n칚o encontrado")

    if dados.nova_senha != dados.confirmar_senha:
        raise HTTPException(status_code=400, detail="As senhas n칚o coincidem")

    # Atualizar a senha no banco
    contador.senha_hash = gerar_hash_senha(dados.nova_senha)
    db.commit()

    return {"mensagem": "Senha redefinida com sucesso"}
